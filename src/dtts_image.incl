// Includes

#include "dtts_image.h"

#include <stdio.h>
#include <math.h>
#include <algorithm>
#include <inttypes.h>
using namespace std;

// Test if a node is in a list
 bool node_in(const node_t pnode, const node_list plist)
{
    if ( find( plist.begin(),plist.end(),pnode ) == plist.end() )
        return false;
    return true;
}

/* Seed the Random number generator */
void initrand() {
    srand((unsigned)(time(0)));
}

/* generates a psuedo-random float between 0.0 and 0.999... */
float randfloat() {
    return rand()/(float(RAND_MAX)+1);
}

/* generates a psuedo-random float between 0.0 and max */
float randfloat(float max) {
    return randfloat()*max;
}

/* generates a psuedo-random float between min and max */
float randfloat(float min, float max) {
	float t_min, t_max;
	if (min < 0) {
		t_min = 0;
		t_max = max + abs(min);
		return randfloat()*(t_max-t_min)- abs(min);
	} else {
		return randfloat()*(max-min)+ min;
	}
}

float ndistance(node_t p, node_t q)
{
    return sqrtf( (p.x-q.x)*(p.x-q.x) + (p.y-q.y)*(p.y-q.y) );
}

float mindist(node_t pnode, node_list nodes)
{
    float min = 1000000.f;
    for (node_list::const_iterator it = nodes.begin(); it != nodes.end(); it++)
    {
        float d = ndistance(pnode,*it);
        if (d<min)  min = d;
    }
    return min;
}

Dtts::Image::Image()
{
    mwidth=0;
    mheight=0;
    mpixels=NULL;
}



Dtts::Image::Image(int pwidth, int pheight)
{
    // Allocate memory for this image

    mwidth = pwidth;
    mheight=pheight;
    mpixels = new float [mwidth*mheight];
    for (int i=0; i<mwidth; i++)
    {
    	for (int j=0; j<mheight; j++)
            mpixels[i+j*mwidth]=0;
    }
}

Dtts::Terrain::Terrain(int pwidth, int pheight):Dtts::Image(pwidth, pheight)
{

}


void Dtts::Image::setMax()
{
    // Allocate memory for this image
    maxval=0.;
    for (int i=0; i<mwidth; i++)
    {
        for (int j=0; j<mheight; j++)
        {
            if (mpixels[i+j*mwidth]>maxval)
                maxval=mpixels[i+j*mwidth];
        }
    }
}

float Dtts::Image::getMax()
{
    // Allocate memory for this image
    float maxh=0.;
    for (int i=0; i<mwidth; i++)
    {
        for (int j=0; j<mheight; j++)
        {
            if (mpixels[i+j*mwidth]>maxh)
                maxh=mpixels[i+j*mwidth];
        }
    }
    maxval = maxh;
    return maxh;
}

float Dtts::Image::getMin()
{
    // Allocate memory for this image
    float minh=INF;
    for (int i=0; i<mwidth; i++)
    {
        for (int j=0; j<mheight; j++)
        {
            if (mpixels[i+j*mwidth]<minh)
                minh=mpixels[i+j*mwidth];
        }
    }
    return minh;
}

Dtts::Image::~Image()
{
    // Free memory if it had being allocated
    delete [] mpixels;

    mwidth=0;
    mheight=0;
    //cout<<"delete image\n";
}

void Dtts::Image::setHeight(const int pheight)
{
    mheight=pheight;
}

void Dtts::Image::setWidth(const int pwidth)
{
    mwidth = pwidth;
}

int Dtts::Image::getHeight()
{
    return mheight;
}

int Dtts::Image::getWidth()
{
    return mwidth;
}

void Dtts::Image::setSize(const int pwidth, const int pheight)
{
    mwidth = pwidth;
    mheight = pheight;
}

void Dtts::Image::setPixel(const int i, const int j, const float pval)
{
    mpixels[i+j*mwidth]=pval;
}

void Dtts::Image::setPixelXY(const int i, const int j, const float pval)
{
    if (inBounds(i,j))
        mpixels[i+j*mwidth]=pval;
}

Dtts::Image Dtts::Image::get_crop(int x0, int y0, int x1, int y1)
{
    int w = (x1-x0)+1;
    int h = (y1-y0)+1;
    Image res(w,h);
    //cout<<"got it\n"<<endl;
    for (int i=0; i<w; i++)
        for (int j=0; j<h; j++)
        {
            //cout<<x0+i<<" "<<y0+j<<"->"<<getPixel(x0+i,y0+j)<<endl;
            res.setPixel(i,j,getPixel(x0+i,y0+j));
        }
    //cout<<"got it\n"<<endl;
    return res;
}

Dtts::Image Dtts::Image::get_crop(int x0, int y0, int x1, int y1, float theta)
{
    int alpha = (int) theta;
    if (alpha==0)  return get_crop(x0,y0,x1,y1);
    else if (alpha%90==0)
    {
        Image cropped = get_crop(x0,y0,x1,y1);
        cropped.rotate(theta);
        return cropped;
    }



    int w = (x1-x0)+1;
    int h = (y1-y0)+1;

    int midx = x0+(w/2);
    int midy = y0+(h/2);

    int nx = midx - w;
    int ny = midy - h;

    Image tmp(w*2,h*2);
    for (int i=0; i<w*2; i++)
        for (int j=0; j<h*2; j++)
        {
            if (inBounds(nx+i,ny+j))
                tmp.setPixel(i,j,getPixel(nx+i,ny+j));
        }
    tmp.rotate(theta);

    Image res(w,h);
    for (int i=0; i<w; i++)
        for (int j=0; j<h; j++)
        {
            res.setPixel(i,j,tmp.getPixel(i+w/2,j+h/2));
        }

    /*int w = (x1-x0)+1;
    int h = (y1-y0)+1;
    int mid = w/2;

    int rot = (int) theta;
    Image res(w,h);
    for (int i=0; i<w; i++)
        for (int j=0; j<h; j++)
        {
            float ni = mid + ((i - mid)*cos_int(rot)) + ((j - mid) * sin_int(rot));
            float nj = mid - ((i - mid)*sin_int(rot)) + ((j - mid) * cos_int(rot));

     if ( ((rot%90)==0) && rx+ni>=0 && ry+nj>=0 && rx+ni<src_w && ry+nj<src_h){
                  int ri = ni;
                  int rj = nj;
                  candv = src_ptr[(rx+ri)+(ry+rj)*src_w];
                        }
                        else
                               candv = cubicInterpol(src_ptr,src_w,src_h,rx+ni,ry+nj);
        }*/



    return res;
}

Dtts::Image Dtts::Image::get_crop(int x0, int y0, int x1, int y1, float theta, int mir)
{
    Image res = get_crop(x0,y0, x1,y1, theta);
    if (mir==1)
    {
        res.mirrorX();
        return res;
    }
    else if (mir==2)
    {
        res.mirrorY();
        return res;
    }
    return res;
}

 float Dtts::Image::getPixel(const int i, const int j)
{

    if (i>=0 && i<mwidth && j>=0 && j<mheight)    return mpixels[i+j*mwidth];
    return 0;
}

float Dtts::Image::getPixel(const node_t pnode)
{
    return getPixel(pnode.x,pnode.y);
}

float Dtts::Image::getPixelXY(const int i, const int j)
{
    int ri =  i<0?0:(i>=mwidth?mwidth-1:i);
    int rj =  j<0?0:(j>=mheight?mheight-1:j);
    return getPixel(ri,rj);
}

float Dtts::Image::linearXY(const float fx, const float fy)
{
    return cubicXY(fx,fy);
    /*const float
        nfx = fx<0?0:(fx>mwidth-1?mwidth-1:fx),
        nfy = fy<0?0:(fy>mheight-1?mheight-1:fy);
    const unsigned int
    x = (unsigned int)nfx,
        y = (unsigned int)nfy;
    const float
    dx = nfx-x,
         dy = nfy-y;
    const unsigned int
    nx = dx>0?x+1:x,
         ny = dy>0?y+1:y;
    const float
    Icc = mpixels[x][y],  Inc = mpixels[nx][y],
                                Icn = mpixels[x][ny], Inn = mpixels[nx][ny];

    return Icc + dx*(Inc-Icc + dy*(Icc+Inn-Icn-Inc)) + dy*(Icn-Icc);*/
}

float Dtts::Image::cubicXY(const float fx, const float fy)
{
    const float
        nfx = fx<0?0:(fx>mwidth-1?mwidth-1:fx),
        nfy = fy<0?0:(fy>mheight-1?mheight-1:fy);
    const int
        x = (int) nfx,
        y = (int) nfy;
    const float
        dx = nfx-x,
         dy = nfy-y;

    const int
        px = x-1<0?0:x-1, nx = dx>0?x+1:x, ax = x+2>=mwidth?mwidth-1:x+2,
        py = y-1<0?0:y-1, ny = dy>0?y+1:y, ay = y+2>=mheight?mheight-1:y+2;

    /*cout<<mwidth<<" "<<mheight<<endl;
    cout<<fx<<" "<<fy<<endl;
    cout<<nfx<<" "<<nfy<<endl;
    cout<<(-1<0)<<" "<<py<<endl;
    cout<<nx<<" "<<ny<<endl;
    cout<<ax<<" "<<ay<<endl;*/

    const float
        Ipp = getPixel(px,py), Icp = getPixel(x,py), Inp = getPixel(nx,py), Iap = getPixel(ax,py),
        Ip = Icp + 0.5f*(dx*(-Ipp+Inp) + dx*dx*(2*Ipp-5*Icp+4*Inp-Iap) + dx*dx*dx*(-Ipp+3*Icp-3*Inp+Iap)),
        Ipc = getPixel(px,y),  Icc = getPixel(x,y), Inc = getPixel(nx,y),  Iac = getPixel(ax,y),
        Ic = Icc + 0.5f*(dx*(-Ipc+Inc) + dx*dx*(2*Ipc-5*Icc+4*Inc-Iac) + dx*dx*dx*(-Ipc+3*Icc-3*Inc+Iac)),
        Ipn = getPixel(px,ny), Icn = getPixel(x,ny), Inn = getPixel(nx,ny), Ian = getPixel(ax,ny),
        In = Icn + 0.5f*(dx*(-Ipn+Inn) + dx*dx*(2*Ipn-5*Icn+4*Inn-Ian) + dx*dx*dx*(-Ipn+3*Icn-3*Inn+Ian)),
        Ipa = getPixel(px,ay), Ica = getPixel(x,ay), Ina = getPixel(nx,ay), Iaa = getPixel(ax,ay),
        Ia = Ica + 0.5f*(dx*(-Ipa+Ina) + dx*dx*(2*Ipa-5*Ica+4*Ina-Iaa) + dx*dx*dx*(-Ipa+3*Ica-3*Ina+Iaa));

    return Ic + 0.5f*(dy*(-Ip+In) + dy*dy*(2*Ip-5*Ic+4*In-Ia) + dy*dy*dy*(-Ip+3*Ic-3*In+Ia));
}

float Dtts::Image::getPixelXY(const node_t pnode)
{
    return getPixelXY(pnode.x,pnode.y);
}

Dtts::Image::Image(const Image& oldImage)
/*copies oldImage into new Image object*/
{
    mwidth = oldImage.mwidth;
    mheight = oldImage.mheight;

    mpixels = new float [mwidth*mheight];
    for(int i = 0; i < mwidth; i++)
    {
        for(int j = 0; j < mheight; j++)
            mpixels[i+j*mwidth] = oldImage.mpixels[i+j*mwidth];
    }
}

vector<node_t> get_rotate_pts(vector<node_t> nodes, node_t ctr, int theta)
{
    vector<node_t> result;
    int r0,c0,r1,c1;
    r0 = ctr.x;
    c0=ctr.y;

    /*for (node_list::const_iterator iny=nodes.begin(); iny!=nodes.end(); iny++){
                cout<<"Point "<<(*iny).first<<" "<<(*iny).second<<endl;
            }*/

    float rads = (theta * PI)/180.0;

    for(vector<node_t>::const_iterator it=nodes.begin(); it!=nodes.end(); it++)
    {
        r1 = (int) (r0 + (((*it).x - r0) * cos(rads)) - (((*it).y - c0) * sin(rads)));
        c1 = (int) (c0 + (((*it).x - r0) * sin(rads)) + (((*it).y - c0) * cos(rads)));
        result.push_back(node_t(r1,c1));
    }

    return result;
}

void rotate_pts(vector<node_t>& nodes, node_t ctr, int theta)
{
    if (theta==0)   return;
    //if (theta>180) theta = 180-theta;
    vector<node_t> result=get_rotate_pts(nodes,ctr,theta);
    nodes.clear();
    nodes = result;
}

void mirrorX_pts(vector<node_t>& nodes, int bsize)
{
    for (unsigned int k=0; k<nodes.size(); k++)
    {
        nodes[k].x = bsize - nodes[k].x-1;
    }
}

void mirrorY_pts(vector<node_t>& nodes, int bsize)
{
    for (unsigned int k=0; k<nodes.size(); k++)
    {
        nodes[k].y = bsize - nodes[k].y-1;
    }
}

Dtts::Image Dtts::Image::get_rotate(int theta)
{
    if (theta==0)   return (*this);

    if (theta>180)  theta = 180-theta;

    int r0, c0;
    float r1, c1;
    Image img(mwidth,mheight);
    img.maxval = maxval;

    float rads = -(theta * PI)/180.0;

    r0 = mwidth / 2;
    c0 = mheight / 2;

    for(int r = 0; r < mwidth; r++)
    {
        for(int c = 0; c < mheight; c++)
        {

            r1 = (r0 + ((r - r0) * cos(rads)) - ((c - c0) * sin(rads)));
            c1 = (c0 + ((r - r0) * sin(rads)) + ((c - c0) * cos(rads)));

            if(inBounds(r1,c1))
            {
                img.setPixel(r,c,cubicXY(r1,c1));
            }
        }
    }


    for(int i = 0; i < mwidth; i++)

        for(int j = 0; j < mheight; j++)
        {
            if(img.getPixel(i,j) == 0 && inBounds(i,j+1))
                img.setPixel(i,j,img.getPixel(i,j+1));
        }
    //oldImage = tempImage;*/

    return img;
}

void Dtts::Image::rotate(int theta)
{
    if (theta==0)   return;

    //if (theta>180)  theta = 180-theta;
    int r0, c0;
    float r1, c1;
    Image img(mwidth,mheight);
    img.maxval = maxval;

    float rads = -(theta * PI)/180.0;

    r0 = mwidth / 2;
    c0 = mheight / 2;

    for(int r = 0; r < mwidth; r++)
    {
        for(int c = 0; c < mheight; c++)
        {

            r1 = (r0 + ((r - r0) * cos(rads)) - ((c - c0) * sin(rads)));
            c1 = (c0 + ((r - r0) * sin(rads)) + ((c - c0) * cos(rads)));

            //if(inBounds(r1,c1))
            {
                img.setPixel(r,c,cubicXY(r1,c1));
            }
        }
    }


    /*for(int i = 0; i < mwidth; i++)

        for(int j = 0; j < mheight; j++)
        {
            if(img.getPixel(i,j) == 0 && inBounds(i,j+1))
                img.setPixel(i,j,img.getPixel(i,j+1));
        }
    //oldImage = tempImage;*/

    for(int i = 0; i < mwidth; i++)
        for(int j = 0; j < mheight; j++)
        {
            mpixels[i+j*mwidth] = img.getPixel(i,j);
        }
}

void Dtts::Image::mirrorX()
{
    Image tmp(mwidth, mheight);

    for (int i=0; i<mwidth; i++)
    {
        for (int j=0; j<mheight; j++)
            tmp.setPixel(i,j,getPixel(mwidth-(i+1),j) );
    }

    for (int i=0; i<mwidth; i++)
        for (int j=0; j<mheight; j++)
            mpixels[i+j*mwidth] = tmp.getPixel(i,j);

}

void Dtts::Image::mirrorY()
{
    Image tmp(mwidth, mheight);

    for (int i=0; i<mwidth; i++)
    {
        for (int j=0; j<mheight; j++)
            tmp.setPixel(i,j,getPixel(i,mheight - (j+1)) );
    }

    for (int i=0; i<mwidth; i++)
        for (int j=0; j<mheight; j++)
            mpixels[i+j*mwidth] = tmp.getPixel(i,j);

}

void Dtts::Image::mirror(int m)
{
    if (m==1) mirrorX();
    else if (m==2)  mirrorY();
}


Dtts::Image Dtts::Image::convolute(const float f_mask[][3], int ksize)
{
    //float f_mask[][3] = {	{1, -2, 1}, {-2, 4,-2},  {1, -2, 1}  };

    //float f_mask[][3] = {	{-1, -2, -1}, {0, 0, 0},  {1, 2, 1}  };

    Image res(mwidth,mheight);
    res.maxval = maxval;
    int i,j,k,l;

    for(i=0; i<mwidth; i++)
    {
        for(j=0; j<mheight; j++)
        {
            float sum=0.;
            for(k=0; k<ksize; k++)
                for(l=0; l<ksize; l++)
                {
                    sum+=getPixelXY(i-((ksize-1)>>1)+k,j-((ksize-1)>>1)+l)*f_mask[k][l];
                }
            res.setPixel(i,j,sum);
        }
    }
    /*float mini=10000000,maxi=0.;
    for(i=0;i<mwidth;i++){
    	for(j=0;j<mheight;j++){
    		if (getPixel(i,j)<mini)	mini = getPixel(i,j);
    		if (getPixel(i,j)>maxi)	maxi = getPixel(i,j);
    	}
    }

    for(i=0;i<mwidth;i++){
    	for(j=0;j<mheight;j++){
    		mpixels[i+j*mwidth]=(getPixel(i,j)-mini);
    	}
    }*/
    return res;
}

Dtts::Image Dtts::Image::filter()
{
    float f_mask[][5] = {	{0.0039, 0.0156, 0.0234, 0.0156, 0.0039},
        {0.0156, 0.0625, 0.0937, 0.0625, 0.0156},
        {0.0234, 0.0937, 0.1406, 0.0937, 0.0234},
        {0.0156, 0.0625, 0.0937, 0.0625, 0.0156},
        {0.0039, 0.0156, 0.0234, 0.0156, 0.0039}
    };
    Image res(mwidth,mheight);
    int i,j,k,l;
    int gauss_width=5;
    res.maxval = maxval;

    for(i=0; i<mwidth; i++)
    {
        for(j=0; j<mheight; j++)
        {
            float sum=0.;
            for(k=0; k<5; k++)
                for(l=0; l<5; l++)
                {
                    sum+=getPixelXY(i-((gauss_width-1)>>1)+k,j-((gauss_width-1)>>1)+l)*f_mask[k][l];
                }
            res.setPixel(i,j,sum);
        }
    }
    return res;
}

void Dtts::Image::filter_me()
{
    Image res=filter();
    for(int i=0; i<mwidth; i++)
    {
        for(int j=0; j<mheight; j++)
        {
            mpixels[i+j*mwidth]=res.getPixel(i,j);
        }
    }
}

vector<Dtts::Image> Dtts::Image::get_pyramid(int nlevels)
{
    vector<Image> pyr;
    Image img(*this);
    for (int k=0; k<nlevels; k++)
    {
        pyr.push_back(img);
        img=img.filter();
    }
    return pyr;
}


Dtts::Image Dtts::Image::filter(int nlevels)
{
    Image img(*this);
    for (int k=0; k<nlevels; k++)
    {
        img=img.filter();
    }
    return img;
}

vector<node_t> Dtts::Image::on_line(node_t p, node_t q)
{
    vector<node_t> result;
    int x0=p.x, y0=p.y;
    int x1=q.x, y1=q.y;

    bool steep = ( abs(y1 - y0) > abs(x1 - x0) );
    if (steep)
    {
        swap(x0, y0);
        swap(x1, y1);
    }
    if (x0 > x1)
    {
        swap(x0, x1);
        swap(y0, y1);
    }
    int deltax = x1 - x0;
    int deltay = abs(y1 - y0);
    int error = deltax / 2 ;
    int ystep;
    int y = y0;
    if (y0 < y1)
        ystep = 1 ;
    else ystep = -1;

    for (int x=x0; x<=x1; x++)
    {
        if (steep)
            result.push_back(node_t(y,x));
        else result.push_back(node_t(x,y));
        error = error - deltay;
        if (error < 0)
        {
            y = y + ystep;
            error = error + deltax;
        }
    }

    return result;

}

vector<point_t> points_on_line(point_t p, point_t q, int nsteps)
{
    vector<point_t> result;
    point_t vec(q.x-p.x,q.y-p.y);
    //float mag = sqrtf((vec.x*vec.x)+(vec.y*vec.y))/nsteps;
    for (int k=0; k<nsteps; k++){
        float fx = p.x+k*vec.x;
        float fy = p.x+k*vec.y;
        result.push_back(point_t(fx,fy));
    }
    return result;

}

void Dtts::Image::drawline(node_t p, node_t q, float color)
{
    int x0=p.x, y0=p.y;
    int x1=q.x, y1=q.y;

    bool steep = ( abs(y1 - y0) > abs(x1 - x0) );
    if (steep)
    {
        swap(x0, y0);
        swap(x1, y1);
    }
    if (x0 > x1)
    {
        swap(x0, x1);
        swap(y0, y1);
    }
    int deltax = x1 - x0;
    int deltay = abs(y1 - y0);
    int error = deltax / 2 ;
    int ystep;
    int y = y0;
    if (y0 < y1)
        ystep = 1 ;
    else ystep = -1;

    for (int x=x0; x<=x1; x++)
    {
        //cout<<x0<<" to "<<x1<<endl;

        if (steep)
        {
            setPixel(y,x,color);
            //cout<<y<<" "<<x<<endl;
        }
        else
        {
            setPixel(x,y,color);
            //cout<<x<<" "<<y<<endl;
        }
        error = error - deltay;
        if (error < 0)
        {
            y = y + ystep;
            error = error + deltax;
        }
    }
}

void Dtts::Image::operator=(const Image& oldImage)
/*copies oldImage into whatever you = it to*/
{
    mwidth = oldImage.mwidth;
    mheight = oldImage.mheight;
    maxval = oldImage.maxval;

    mpixels = new float [mwidth*mheight];
    for(int i = 0; i < mwidth; i++)
    {
        for(int j = 0; j < mheight; j++)
            mpixels[i+j*mwidth] = oldImage.mpixels[i+j*mwidth];
    }
}



Dtts::Image::Image(Image& img, int x, int y, int width,int height)
/*Pulls a sub image out of oldImage based on users values, and then stores it
    in oldImage*/
{
    mwidth=width;
    mheight = height;
    maxval = img.maxval;

    mpixels = new float [mwidth*mheight];
    for(int i = 0; i < mwidth; i++)
    {
        for(int j = 0; j < mheight; j++)
            mpixels[i+j*mwidth] = img.getPixelXY(i + x,j + y);
    }


}

void Dtts::Terrain::operator=(const Terrain& oldImage)
/*copies oldImage into whatever you = it to*/
{
    mwidth = oldImage.mwidth;
    mheight = oldImage.mheight;
    maxval = oldImage.maxval;

    mpixels = new float [mwidth*mheight];
    for(int i = 0; i < mwidth; i++)
    {
        for(int j = 0; j < mheight; j++)
            mpixels[i+j*mwidth] = oldImage.mpixels[i+j*mwidth];
    }

    mheightscale = oldImage.mheightscale;
    mbaseheight = oldImage.mbaseheight;
    mscale = oldImage.mscale;
}


Dtts::Image::Image(Image& img, int rate)
{
    mwidth= img.mwidth/rate;
    mheight = img.mheight/rate;
    maxval = img.maxval;

    mpixels = new float [mwidth*mheight];
    for(int i = 0; i < mwidth; i++)
    {
        for(int j = 0; j < mheight; j++)
            mpixels[i+j*mwidth] = img.getPixel(i*rate,j*rate);
    }
}


void Dtts::Image::savePGM(const char* fname, size_t threshold)
{
    threshold = 255;
    ofstream ofp;
    ofp.open(fname, ios::out | ios::trunc | ios_base::binary);

    if (!ofp)
    {
        cout << "Can't open file: " << fname << endl;
        exit(1);
    }

    ofp << "P5" << endl;
    ofp << mwidth << " " << mheight << endl;
    ofp << 255 << endl;

    unsigned char val;

    float minih = 100000, maxih=0;
    for(int j = 0; j <getHeight(); j++)
        for(int i = 0; i < getWidth(); i++)
        {
            if (getPixel(i,j)<minih)
            {
                minih = getPixel(i,j);
            }
            if (getPixel(i,j)>maxih)
            {
                maxih = getPixel(i,j);
            }
        }
    maxih = threshold;
    if (minih>0)
        minih=0;
    else
        minih=-1;

    maxih -= minih;

    for(int j = 0; j <getHeight(); j++)
        for(int i = 0; i < getWidth(); i++)
        {
            float v = ( (float) (getPixel(i,j)-minih)*255./maxih);
            if (v>255)  v=255;
            if (v<0)    v=0;
            val = (unsigned char) v;
            ofp.write((char *) &val, sizeof(val));
        }


    if (ofp.fail())
    {
        cout << "Can't write image " << fname << endl;
        exit(0);
    }

    ofp.close();

}


void Dtts::Image::loadPGM(const char* fname)
{
    ifstream ifp;
    ifp.open(fname, ios::in | ios_base::binary);

    if (!ifp)
    {
        cout << "Can't open file: " << fname << endl;
        exit(1);
    }

    char header [100], *ptr;

    ifp.getline(header,100,'\n');        //magic number
    if ( (header[0]!=80) || (header[1]!=53) )      //if not P5
    {
        cout << "Image " << fname << " is not PGM" << endl;
        exit(1);
    }

    ifp.getline(header,100,'\n');
    while(header[0]=='#')        //file name line in file starts with #
        ifp.getline(header,100,'\n');

    mwidth=strtol(header,&ptr,0);    //number of colums
    mheight=atoi(ptr);            //number of rows

    ifp.getline(header,100,'\n');
    maxval=strtol(header,&ptr,0);    //max gray value

    unsigned char * charImage = (unsigned char *) new unsigned char [mwidth*mheight];    //creates 2D array

    ifp.read( reinterpret_cast<char *>(charImage), (mwidth*mheight)*sizeof(unsigned char));  //reads in 2D ar

    if (ifp.fail())
    {
        cout << "Can't read image " << fname << endl;
        exit(0);
    }

    ifp.close();

    //cout<<mwidth<<" "<<mheight<<endl;

    mpixels = new float [mwidth*mheight];
    for(int i = 0; i < mwidth; i++)
    {
        for(int j = 0; j < mheight; j++)
            mpixels[i+j*mwidth]=0;
    }

    int val;

    //cout<<mwidth<<" "<<mheight<<endl;

    for(int j=0; j<mheight; j++)
        for(int i=0; i<mwidth; i++)
        {
            val = (int)charImage[i+j*mwidth];
            setPixel(i, j, val);  //just to make sure the pixel value is never 0
        }

    // cout<<mwidth<<" "<<mheight<<endl;
    setMax();

    /*for(int j=0; j<mheight; j++)
        for(int i=0; i<mwidth; i++){
            val = getPixel(i,j);
            setPixel(i, j, val*(256/maxval));  //just to make sure the pixel value is never 0
        }*/
    delete [] charImage;

}


bool Dtts::Image::inBounds(int i, int j)
{
    return (i>=0 && j>=0 && i<mwidth && j<mheight);
}

void Dtts::Image::gaussianBlur() {}

void Dtts::Image::compress() {}

void Dtts::Image::reverse()
{
    float maxi=0.;
    for (int i=0; i<mwidth; i++)
    {
        for (int j=0; j<mheight; j++)
        {
            if (getPixel(i,j)>maxi)
                maxi=getPixel(i,j);
        }
    }

    for (int i=0; i<mwidth; i++)
    {
        for (int j=0; j<mheight; j++)
        {
            //cout<<getPixel(i,j)<<" ";
            mpixels[i+j*mwidth]=maxi-getPixel(i,j);
            //cout<<getPixel(i,j)<<endl;
        }
    }
}


void Dtts::Image::resize(int nwidth, int nheight)
{
    // Allocate memory for this image
    float* npixels = new float [nwidth*nheight];
    for (int i=0; i<nwidth; i++)
    {
        for (int j=0; j<nheight; j++)
            npixels[i+j*nwidth]=0;
    }



    for (int i=0; i<rmin(mwidth,nwidth); i++)
    {
        for (int j=0; j<rmin(mheight,nheight); j++)
            npixels[i+j*nwidth]=getPixel(i,j);
    }

    delete [] mpixels;
    mpixels=NULL;

    mwidth = nwidth;
    mheight=nheight;
    mpixels =npixels;

}


/******************************** Terrain **********************************/

Dtts::Terrain::Terrain()
{
    mwidth=0;
    mheight=0;
    maxval=255;
    minval = 0;
    mscale=30;
    mbaseheight=1000;
    mheightscale=0;
    mpixels=NULL;
}

void Dtts::Terrain::setElevation(const int i, const int j, const int eval)
{
    float alt = mbaseheight+(eval*mheightscale/65536.0);
    mpixels[i+j*mwidth] = alt;
}

int Dtts::Terrain::getElevation(const int i, const int j)
{
    float alt = getPixel(i,j) ;
    int eval = (int)  (alt-mbaseheight)*65536.0/(mheightscale) ;
    return eval;
}

bool Dtts::Terrain::loadTerragen(const char* fname)
{
    ifstream infile;
    char * inbuffer;
    char * tmpstr;
    int pos=16, iter=0;
    int tersize, w=0,h=0, truncdim,mindim;
    bool alts= false;
    string frombuffer;

    infile.open(fname, ios_base::in | ios_base::binary);
    if(!infile.is_open())
    {
        printf("Could not open file %s \n",fname);
        return  false;
    }

    struct stat results;
    stat((char *) fname, &results);
    int size = results.st_size;

    // put file contents in buffer
    inbuffer = new char[size];
    infile.read(inbuffer, size);

    tmpstr = (char *) &inbuffer[0];
    frombuffer = string((char *) tmpstr, 16);

    if (frombuffer.compare("TERRAGENTERRAIN") == 0)
    {
        printf("Error: this is not a Terragen file!\n");
        delete tmpstr;
        return false;
    }

    //printf("Error: this is not a Terragen file!\n");
    mscale=30.0f;

    while(!alts && iter < 7)
    {
        tmpstr = (char *) &inbuffer[pos];
        frombuffer = string((char *) tmpstr, 4);
        if(frombuffer.compare("SIZE") == 0) // num data points on int16_test side - 1
        {
            pos += 4;
            tersize = (int) (* ((int16_t *) &inbuffer[pos]));
            w = tersize+1;
            h = tersize+1;  // defaults assuming no XPTS, YPTS
            pos += 4;
        }
        if(frombuffer.compare("XPTS") == 0) // num data points in x dimension
        {
            pos += 4;
            w = (int) (* ((int16_t *) &inbuffer[pos]));
            pos += 4;
            cout << "XPTS = " << w << "found\n";
        }
        if(frombuffer.compare("YPTS") == 0) // num data points in y dimension
        {
            pos += 4;
            h = (int) (* ((int16_t *) &inbuffer[pos]));
            pos += 4;
            cout<<"YPTS = " << h << "found\n";
        }
        if(frombuffer.compare("SCAL") == 0) // scale of terrain element in metres
        {
            pos += 4;
            mscale = (* ((float *) &inbuffer[pos]));
            pos += 12;
        }
        if(frombuffer.compare("CRAD") == 0) // planet radius - skip
            pos += 8;
        if(frombuffer.compare("CRVM") == 0) // draping state - skip
            pos += 8;
        if(frombuffer.compare("ALTW") == 0) // marks the beginning of the altitude data
        {
            pos += 4;
            mheightscale = (int) (* ((int16_t *) &inbuffer[pos]));
            pos += 2;
            mbaseheight = (int) (* ((int16_t *) &inbuffer[pos]));
            pos += 2;
            alts = true; // finish processing header block
        }
        iter++;
    }

    if (!alts)
    {
        printf ("Error: could not find elevation values");
        delete tmpstr;
        return false;
    }

    if(h != w)
    {
        mindim = min(h, w);
        cout<<"Terrain is not square. Truncating from (" << w <<" x " << h << ") to (" << mindim << " x " << mindim << ")\n";
    }
    else
        mindim = h;


    // terrain must be power of 2
    /*
    float p = logf((float) mindim) / logf(2.0f);
    truncdim = (int) powf(2.0f, floor(p));
    if(truncdim != mindim){
    	cout<<"Terrain is not a power of 2. Truncating from (" << mindim << " x " << mindim <<") to (" << truncdim << " x " << truncdim << ")\n";
    }*/
    truncdim = mindim;

    if(truncdim > DEFAULT_DIMX)
    {
        cout<<"Terrain is larger than system can handle ... truncating to (" << DEFAULT_DIMX << " x " << DEFAULT_DIMX << ")\n";
        truncdim = DEFAULT_DIMX;
    }

    cout<< "Terrain dim = " << truncdim << " x " << truncdim <<endl;

    mwidth=truncdim;
    mheight=truncdim;

    mpixels = new float [mwidth*mheight];
    for(int i = 0; i < mwidth; i++)
    {
        for(int j = 0; j < mheight; j++)
            mpixels[i+j*mwidth]=0;
    }

    maxval = 0;
    minval = INF;

    for(int j = getHeight()-1; j >0; j--)
        for(int i = 0; i < getWidth(); i++)
        {
            //printf("elevation: %d\n",c);
            float alt = mbaseheight+((* ((int16_t *) &inbuffer[pos]))*mheightscale/65536.0);
            //cout<<alt<<" ";
            if (alt>maxval){
                 maxval = alt;
                 //cout<<maxval<<" ";
            }
            if (alt<minval){
                 minval = alt;
                 //cout<<maxval<<" ";
            }
            mpixels[i+j*mwidth] = alt;
            pos += 2;
        }
    //cout<<"Max: "<<maxval<<endl;
    //cout<<"Pix1: "<<mpixels[0][0]<<endl;

   // infile.open(fname, ios_base::in | ios_base::binary);
   minval -=0.001;
   maxval-=minval;

   if (fabs(maxval) > 1e-8)
    for(int j = 0; j < getHeight(); j++)
        for(int i = 0; i < getWidth(); i++)
        {
            mpixels[i+j*mwidth] = (getPixel(i,j)-minval)*255/(maxval);
        }

    cout<<"Max: "<<maxval<<" "<<255/(maxval)<<endl;
    //setMax();
     //cout<<"Pix2: "<<mpixels[0][0]<<endl;


    cout<<"mscale: "<<mscale<<endl; //mscale=13.8;

    delete [] inbuffer;
    infile.close();
    return true;
}


bool Dtts::Terrain::saveTerragen(const char* fname)
{
    minval = getMin();
    maxval = getMax();

    ofstream outfile;
    int i, j;
    float hght, hrange, hbase;
    int16_t val, pad = 0;

    float minih = 100000, maxih=0;

    for(j = 0; j < getHeight(); j++)
        for(i = 0; i < getWidth(); i++)
        {
            if (((getPixel(i,j)-1)*maxval/255)+minval<minih)
            {
                minih = ((getPixel(i,j)-1)*maxval/255)+minval;
            }
            if (((getPixel(i,j)-1)*maxval/255)+minval>maxih)
            {
                maxih = ((getPixel(i,j)-1)*maxval/255)+minval;
            }
        }



    hrange = maxih - minih;			// in terrain coordinates
    hbase = minih + (hrange / 2.0f); 	// midpoint of hrange in terrain coordinates

    // now convert to grid cell units
    mbaseheight = (hbase+2);
    mheightscale = (hrange+1);

    //cout<<hrange<<" "<<hbase<<" "<<mbaseheight<<" "<<mheightscale<<endl;

    outfile.open(fname, ios_base::out | ios_base::binary);
    if(outfile.is_open())
    {
        // write file type
        outfile.write("TERRAGENTERRAIN ", 16);

        outfile.write("SIZE", 4); // dimensions

        val = (int16_t) mwidth-1;
        outfile.write((char *) &val, 2);
        outfile.write((char *) &pad, 2);  // padding

        outfile.write("SCAL", 4); // terrain scale

        for(i = 0; i < 3; i++)
            outfile.write((char *) &mscale, 4);

        //hrange = maxh - minh;			// in terrain coordinates
        //hbase = minh + hrange / 2.0f; 	// midpoint of hrange in terrain coordinates
        // now convert to grid cell units
        //terheight = (hrange * ((float) dimx));
        //baseheight = (hbase * ((float) dimx));

        outfile.write("ALTW", 4); // altitude header
        val = (int16_t) (mheightscale-1);
        outfile.write((char *) &val, 2); // terrain height
        val = (int16_t) mbaseheight;
        outfile.write((char *) &val, 2); // terrain base

        for(j = 0; j < getHeight(); j++)
            for(i = 0; i < getWidth(); i++)
            {
                // conversion to metres is: height = terbase + h * terheight / 65536
                hght = ((getPixel(i, (getHeight()-1)-j))*(maxval)/255)+minval; // height in grid cell units
                hght = ((hght - mbaseheight) * 65536.0) / mheightscale;
                val = (int16_t) hght;
                outfile.write((char *) &val, 2);
            }

        // may need padding if data is not 4 byte aligned
        if(mwidth % 2 == 1)
            outfile.write((char *) &pad, 2);

        outfile.write("EOF ", 4);

        // tidy up
        outfile.close();
        return true;
    }
    else // unable to open file
    {
        cout<<"Error: unable to open file";
        return false;
    }
}

void Dtts::Image::convertTerragen(const char* fname)
{
    ofstream outfile;
    int i, j;
    float terscale=30., hght;
    int terheight=100, baseheight=100;
    int16_t val, pad = 0;


    outfile.open(fname, ios_base::out | ios_base::binary);
    if(outfile.is_open())
    {
        // write file type
        outfile.write("TERRAGENTERRAIN ", 16);

        outfile.write("SIZE", 4); // dimensions

        val = (int16_t) mwidth-1;
        outfile.write((char *) &val, 2);
        outfile.write((char *) &pad, 2);  // padding

        outfile.write("SCAL", 4); // terrain scale

        for(i = 0; i < 3; i++)
            outfile.write((char *) &terscale, 4);

        //hrange = maxh - minh;			// in terrain coordinates
        //hbase = minh + hrange / 2.0f; 	// midpoint of hrange in terrain coordinates
        // now convert to grid cell units
        //terheight = (hrange * ((float) dimx));
        //baseheight = (hbase * ((float) dimx));

        outfile.write("ALTW", 4); // altitude header
        val = (int16_t) (terheight);
        outfile.write((char *) &val, 2); // terrain height
        val = (int16_t) baseheight;
        outfile.write((char *) &val, 2); // terrain base

        for(j = 0; j < getHeight(); j++)
            for(i = 0; i < getWidth(); i++)
            {
                // conversion to metres is: height = terbase + h * terheight / 65536
                hght = (getPixel(i, j)); // height in grid cell units
                hght = ((hght - baseheight) * 65535.0f) / terheight;
                val = (int16_t) hght;
                outfile.write((char *) &val, 2);
            }

        // may need padding if data is not 4 byte aligned
        if(mwidth % 2 == 1)
            outfile.write((char *) &pad, 2);

        outfile.write("EOF ", 4);

        // tidy up
        outfile.close();
    }
    else // unable to open file
    {
        cout<<"Error: unable to open file";
    }
}

Dtts::Image Dtts::Terrain::getImage()
{
    Image img(mwidth, mheight);
    img.maxval = maxval;

    for(int i = 0; i < mwidth; i++)
    {
        for(int j = 0; j < mheight; j++)
            img.setPixel(i,j,getPixel(i,j));
    }
    return img;
}

Dtts::Image add(Dtts::Image& img1,Dtts::Image& img2)
{
    int mw = img1.getWidth();
    int mh = img1.getHeight();

    Dtts::Image img(mw,mh);

    for(int r = 0; r < mw; r++)
    {
        for(int c = 0; c < mh; c++)
        {
            float val = img1.getPixelXY(r,c)+img2.getPixelXY(r,c);
            img.setPixelXY(r,c,val);
        }
    }
    return img;
}

Dtts::Image diff(Dtts::Image& img1,Dtts::Image& img2)
{
    int mw = img1.getWidth();
    int mh = img1.getHeight();

    Dtts::Image img(mw,mh);

    for(int r = 0; r < mw; r++)
    {
        for(int c = 0; c < mh; c++)
        {
            float val = img1.getPixelXY(r,c)-img2.getPixelXY(r,c);
            if (val<0)  val=-val;
            img.setPixel(r,c,val);
        }
    }
    return img;
}


float compare_pnsr(Dtts::Image& img1, Dtts::Image&img2 )
{
    if (img1.getWidth()!=img2.getWidth() || img1.getHeight()!=img2.getHeight())
        printf("Cannot compare image of different sizes (%dx%d and %dx%d)\n",img1.getWidth(),img1.getHeight(),img2.getWidth(),img2.getHeight());

    int mh = img1.getHeight();
    int mw = img2.getWidth();

    float terror = 0.;

    for (int i=0; i<mw; i++)
        for (int j=0; j<mh; j++)
        {
            terror+= square(img1.getPixel(i,j)-img2.getPixel(i,j));
        }
    float rms = sqrtf(terror/(mw*mh));

    return 20.0*logf(img1.maxval/rms)/logf(10.0);
}

float compare_mse(Dtts::Image& img1, Dtts::Image&img2 )
{
    if (img1.getWidth()!=img2.getWidth() || img1.getHeight()!=img2.getHeight())
        printf("Cannot compare image of different sizes (%dx%d and %dx%d)\n",img1.getWidth(),img1.getHeight(),img2.getWidth(),img2.getHeight());

    int mh = img1.getHeight();
    int mw = img2.getWidth();

    float terror = 0.;

    for (int i=0; i<mw; i++)
        for (int j=0; j<mh; j++)
        {
            terror+= square(img1.getPixel(i,j)-img2.getPixel(i,j));
        }

    return sqrtf(terror/(mw*mh));
}

float compare_overlap(Dtts::Image& src, Dtts::Image&img2 ,int x, int y )
{

    int mh = src.getHeight();
    int mw = src.getWidth();

    float terror = 0.;
    int count = 0;

    for (int i=0; i<mw; i++)
        for (int j=0; j<mh; j++)
        {
            if ( img2.inBounds(i+x, j+y) && img2.getPixel(i+x, j+y)>BG )
            {
                terror+= square( src.getPixel(i,j)-img2.getPixel(i+x, j+y) );
                count++;
            }
        }
    return sqrtf(terror/count);

}

Dtts::Image sobelEdge(Dtts::Image img)
{

    Dtts::Image res1 = img.convolute(sobel_filterX,3);
    Dtts::Image res2 = img.convolute(sobel_filterY,3);

    Dtts::Image res(img.getWidth(),img.getHeight());
    for (int i=0; i<img.getWidth(); i++)
        for (int j=0; j<img.getHeight(); j++)
        {
            float a=res1.getPixel(i,j);
            if (a<0)    a=-a;
            float b=res2.getPixel(i,j);
            if (b<0)    b=-b;
            float c = sqrtf((a*a)+(b*b)); //if (c>0.05) c=maxv;
            res.setPixel(i,j,c);
        }

    return res;
}

void normalizeImage( Dtts::Image& image )
{
    float * h_data = image.getPixels();
    int w = image.width();
    int h = image.height();

    float min, max;
    float height;
    int i;

    min = h_data[0];
    max = h_data[0];

    //find the min/max values of the height temp_buffer
    for( i=1; i<w*h; i++ )
    {
        if( h_data[i]>max )
            max= h_data[i];

        else if( h_data[i]<min )
            min= h_data[i];
    }

    //find the range of the altitude
    if( max <= min )
        return;

    height= max-min;

    //scale the values to a range of 0-255 (because I like things that way)
    for( i=0; i<w*h; i++ )
        h_data[i]= ( ( h_data[i]-min )/height )*255.0f;
}
